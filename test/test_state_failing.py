# Automatically generated by Pynguin.
import state as module_0
import game_rules as module_1


def test_case_0():
    try:
        perform_activity_0 = module_0.PerformActivity()
        assert perform_activity_0.state_id == 'ST_ACTIVITY'
        dict_0 = None
        var_0 = perform_activity_0.transitionate(dict_0)
        assert var_0.state_id == 'ST_TURN'
        assert var_0.re_rol == 3
        game_over_0 = module_0.GameOver()
        assert game_over_0.state_id == 'ST_GAME_OVER'
        game_start_0 = module_0.GameStart()
        assert game_start_0.state_id == 'ST_GAME_START'
        str_0 = 'Rrio",B?Y'
        game_start_1 = module_0.GameStart()
        assert game_start_1.state_id == 'ST_GAME_START'
        var_1 = game_start_1.transitionate(str_0)
    except BaseException:
        pass


def test_case_1():
    try:
        game_data_0 = None
        game_start_0 = module_0.GameStart()
        assert game_start_0.state_id == 'ST_GAME_START'
        display_0 = module_0.Display()
        assert display_0.state_id == 'ST_GENERAL'
        var_0 = game_start_0.update(game_data_0)
    except BaseException:
        pass


def test_case_2():
    try:
        game_data_0 = None
        game_start_0 = module_0.GameStart()
        assert game_start_0.state_id == 'ST_GAME_START'
        display_0 = module_0.Display()
        assert display_0.state_id == 'ST_GENERAL'
        game_rules_0 = module_1.GameRules()
        play_game_0 = module_0.PlayGame()
        assert play_game_0.state_id == 'ST_TURN'
        assert play_game_0.re_rol == 3
        var_0 = play_game_0.apply_rules(game_rules_0, game_data_0)
    except BaseException:
        pass


def test_case_3():
    try:
        bool_0 = True
        state_0 = module_0.State()
        assert state_0.state_id == 'ST_GENERAL'
        var_0 = state_0.set_transitionable(bool_0)
        game_data_0 = None
        state_1 = module_0.State()
        assert state_1.state_id == 'ST_GENERAL'
        var_1 = state_1.traverseState(game_data_0)
    except BaseException:
        pass


def test_case_4():
    try:
        quit_0 = module_0.Quit()
        assert quit_0.state_id == 'ST_QUIT'
        game_start_0 = module_0.GameStart()
        assert game_start_0.state_id == 'ST_GAME_START'
        list_0 = []
        var_0 = game_start_0.transitionate(list_0)
    except BaseException:
        pass


def test_case_5():
    try:
        lobby_0 = module_0.Lobby()
        assert lobby_0.state_id == 'ST_LOBBY'
        game_data_0 = module_1.GameData()
    except BaseException:
        pass


def test_case_6():
    try:
        game_data_0 = None
        game_over_0 = module_0.GameOver()
        assert game_over_0.state_id == 'ST_GAME_OVER'
        lobby_0 = module_0.Lobby()
        assert lobby_0.state_id == 'ST_LOBBY'
        var_0 = lobby_0.handle_answer_add_user(game_data_0)
    except BaseException:
        pass


def test_case_7():
    try:
        game_data_0 = None
        perform_activity_0 = module_0.PerformActivity()
        assert perform_activity_0.state_id == 'ST_ACTIVITY'
        var_0 = perform_activity_0.update(game_data_0)
    except BaseException:
        pass


def test_case_8():
    try:
        dict_0 = {}
        display_0 = module_0.Display()
        assert display_0.state_id == 'ST_GENERAL'
        state_0 = display_0.using(dict_0)
        assert state_0.state_id == 'ST_GENERAL'
        display_1 = module_0.Display()
        assert display_1.state_id == 'ST_GENERAL'
        str_0 = '`Ad<Q<Jj&BYklaD|.'
        state_1 = display_1.message(str_0)
        assert state_1.state_id == 'ST_GENERAL'
        str_1 = display_1.get_message()
        game_data_0 = module_1.GameData()
    except BaseException:
        pass


def test_case_9():
    try:
        bool_0 = True
        state_0 = module_0.State()
        assert state_0.state_id == 'ST_GENERAL'
        display_0 = module_0.Display()
        assert display_0.state_id == 'ST_GENERAL'
        state_1 = display_0.next_state(state_0)
        assert state_1.state_id == 'ST_GENERAL'
        display_1 = module_0.Display()
        assert display_1.state_id == 'ST_GENERAL'
        state_2 = display_1.next_state(state_1)
        assert state_2.state_id == 'ST_GENERAL'
        display_2 = module_0.Display()
        assert display_2.state_id == 'ST_GENERAL'
        state_3 = state_1.get_state(bool_0)
    except BaseException:
        pass


def test_case_10():
    try:
        game_data_0 = None
        str_0 = 'g2KBy{cHZXe _D^='
        list_0 = [str_0, str_0, str_0]
        display_0 = module_0.Display()
        assert display_0.state_id == 'ST_GENERAL'
        game_over_0 = None
        perform_activity_0 = module_0.PerformActivity()
        assert perform_activity_0.state_id == 'ST_ACTIVITY'
        var_0 = perform_activity_0.transitionate(game_over_0)
        assert var_0.state_id == 'ST_TURN'
        assert var_0.re_rol == 3
        state_0 = display_0.using(list_0)
        assert state_0.state_id == 'ST_GENERAL'
        game_rules_0 = module_1.GameRules()
        assert game_rules_0 is not None
        list_1 = [var_0, str_0, state_0]
        list_2 = [list_1, list_1]
        var_1 = perform_activity_0.transitionate(list_2)
        assert var_1.state_id == 'ST_TURN'
        assert var_1.re_rol == 3
        str_1 = '&%P;ACO_o0n+\x0cG*Fk'
        state_1 = display_0.message(str_1)
        assert state_1.state_id == 'ST_GENERAL'
        play_game_0 = module_0.PlayGame()
        assert play_game_0.state_id == 'ST_TURN'
        assert play_game_0.re_rol == 3
        var_2 = play_game_0.apply_rules(game_rules_0, game_data_0)
    except BaseException:
        pass


def test_case_11():
    try:
        game_data_0 = None
        str_0 = 'g2KBy{cHZXe _D^='
        list_0 = [str_0, str_0, str_0]
        display_0 = module_0.Display()
        assert display_0.state_id == 'ST_GENERAL'
        game_over_0 = None
        perform_activity_0 = module_0.PerformActivity()
        assert perform_activity_0.state_id == 'ST_ACTIVITY'
        var_0 = perform_activity_0.transitionate(game_over_0)
        assert var_0.state_id == 'ST_TURN'
        assert var_0.re_rol == 3
        state_0 = display_0.using(list_0)
        assert state_0.state_id == 'ST_GENERAL'
        str_1 = '&%P;ACO_o0n+\x0cG*Fk'
        state_1 = display_0.message(str_1)
        assert state_1.state_id == 'ST_GENERAL'
        play_game_0 = module_0.PlayGame()
        assert play_game_0.state_id == 'ST_TURN'
        assert play_game_0.re_rol == 3
        var_1 = state_0.update(game_data_0)
        assert var_1 is None
        game_over_1 = module_0.GameOver()
        assert game_over_1.state_id == 'ST_GAME_OVER'
        var_2 = game_over_1.update(list_0)
        assert var_2 is None
        var_3 = state_0.update(game_data_0)
        assert var_3 is None
        var_4 = state_0.update(game_data_0)
        assert var_4 is None
        game_start_0 = module_0.GameStart()
        assert game_start_0.state_id == 'ST_GAME_START'
        var_5 = game_over_1.update(game_start_0)
        assert var_5 is None
        display_1 = module_0.Display()
        assert display_1.state_id == 'ST_GENERAL'
        bool_0 = False
        state_2 = display_0.using(bool_0)
        assert state_2.state_id == 'ST_GENERAL'
        var_6 = state_1.transitionate(game_data_0)
    except BaseException:
        pass


def test_case_12():
    try:
        game_data_0 = None
        game_start_0 = module_0.GameStart()
        assert game_start_0.state_id == 'ST_GAME_START'
        display_0 = module_0.Display()
        assert display_0.state_id == 'ST_GENERAL'
        play_game_0 = module_0.PlayGame()
        assert play_game_0.state_id == 'ST_TURN'
        assert play_game_0.re_rol == 3
        var_0 = play_game_0.update(game_data_0)
    except BaseException:
        pass


def test_case_13():
    try:
        state_0 = module_0.State()
        assert state_0.state_id == 'ST_GENERAL'
        game_data_0 = None
        str_0 = 'g2KBy{cHZXe _D^='
        list_0 = [str_0, str_0, str_0]
        display_0 = module_0.Display()
        assert display_0.state_id == 'ST_GENERAL'
        game_over_0 = None
        perform_activity_0 = module_0.PerformActivity()
        assert perform_activity_0.state_id == 'ST_ACTIVITY'
        var_0 = state_0.transitionate(game_data_0)
        var_1 = perform_activity_0.transitionate(game_over_0)
        assert var_0 is None
        assert var_1.state_id == 'ST_TURN'
        assert var_1.re_rol == 3
        state_1 = display_0.using(list_0)
        assert state_1.state_id == 'ST_GENERAL'
        game_rules_0 = module_1.GameRules()
        assert game_rules_0 is not None
        str_1 = '&%P;ACO_0n+\x0cG*Fk'
        state_2 = display_0.message(str_1)
        assert state_2.state_id == 'ST_GENERAL'
        play_game_0 = module_0.PlayGame()
        assert play_game_0.state_id == 'ST_TURN'
        assert play_game_0.re_rol == 3
        game_rules_1 = module_1.GameRules()
        assert game_rules_1 is not None
        var_2 = play_game_0.apply_rules(game_rules_1, game_data_0)
    except BaseException:
        pass


def test_case_14():
    try:
        game_data_0 = None
        str_0 = 'g2KBy{cHZXe _D^='
        list_0 = [str_0, str_0, str_0]
        perform_activity_0 = module_0.PerformActivity()
        assert perform_activity_0.state_id == 'ST_ACTIVITY'
        display_0 = module_0.Display()
        assert display_0.state_id == 'ST_GENERAL'
        game_over_0 = None
        perform_activity_1 = module_0.PerformActivity()
        assert perform_activity_1.state_id == 'ST_ACTIVITY'
        var_0 = perform_activity_1.transitionate(game_over_0)
        assert var_0.state_id == 'ST_TURN'
        assert var_0.re_rol == 3
        state_0 = display_0.using(list_0)
        assert state_0.state_id == 'ST_GENERAL'
        lobby_0 = module_0.Lobby()
        assert lobby_0.state_id == 'ST_LOBBY'
        var_1 = lobby_0.update(game_data_0)
        assert var_1 is None
        game_rules_0 = module_1.GameRules()
        assert game_rules_0 is not None
        list_1 = [list_0, list_0]
        var_2 = perform_activity_1.transitionate(list_1)
        assert var_2.state_id == 'ST_TURN'
        assert var_2.re_rol == 3
        var_3 = display_0.transitionate(game_data_0)
    except BaseException:
        pass


def test_case_15():
    try:
        game_data_0 = None
        str_0 = 'g2KBy{cHZXe _D^='
        list_0 = [str_0, str_0, str_0]
        display_0 = module_0.Display()
        assert display_0.state_id == 'ST_GENERAL'
        game_over_0 = None
        perform_activity_0 = module_0.PerformActivity()
        assert perform_activity_0.state_id == 'ST_ACTIVITY'
        var_0 = perform_activity_0.transitionate(game_over_0)
        assert var_0.state_id == 'ST_TURN'
        assert var_0.re_rol == 3
        state_0 = module_0.State()
        assert state_0.state_id == 'ST_GENERAL'
        game_rules_0 = module_1.GameRules()
        assert game_rules_0 is not None
        str_1 = '&%P;ACO_o0n+\x0cG*Fk'
        state_1 = display_0.message(str_1)
        assert state_1.state_id == 'ST_GENERAL'
        play_game_0 = module_0.PlayGame()
        assert play_game_0.state_id == 'ST_TURN'
        assert play_game_0.re_rol == 3
        var_1 = state_0.update(game_data_0)
        assert var_1 is None
        game_over_1 = module_0.GameOver()
        assert game_over_1.state_id == 'ST_GAME_OVER'
        var_2 = game_over_1.update(list_0)
        assert var_2 is None
        var_3 = state_0.update(game_data_0)
        assert var_3 is None
        var_4 = state_0.update(game_data_0)
        assert var_4 is None
        game_start_0 = module_0.GameStart()
        assert game_start_0.state_id == 'ST_GAME_START'
        var_5 = game_over_1.update(game_start_0)
        assert var_5 is None
        set_0 = set()
        var_6 = game_over_1.update(set_0)
        assert var_6 is None
        display_1 = module_0.Display()
        assert display_1.state_id == 'ST_GENERAL'
        str_2 = None
        state_2 = display_0.message(str_2)
        assert state_2.state_id == 'ST_GENERAL'
        var_7 = game_start_0.update(game_data_0)
    except BaseException:
        pass
