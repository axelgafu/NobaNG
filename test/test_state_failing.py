# Automatically generated by Pynguin.
import state as module_0
import game_rules as module_1
import player as module_2


def test_case_0():
    try:
        str_0 = '{>8vbrKI]K7L;43U'
        display_0 = module_0.Display()
        assert display_0.state_id == 'ST_GENERAL'
        state_0 = display_0.message(str_0)
        assert state_0.state_id == 'ST_GENERAL'
        game_data_0 = None
        play_game_0 = module_0.PlayGame()
        assert play_game_0.state_id == 'ST_TURN'
        assert play_game_0.re_rol == 3
        assert play_game_0.sub_state == 1
        assert module_0.PlayGame.STATE_THROWING_DICE == 1
        assert module_0.PlayGame.STATE_PLAYER_DECIDING == 2
        assert module_0.PlayGame.STATE_ENDING_TURN == 3
        var_0 = play_game_0.update(game_data_0)
    except BaseException:
        pass


def test_case_1():
    try:
        quit_0 = module_0.Quit()
        assert quit_0.state_id == 'ST_QUIT'
        quit_1 = module_0.Quit()
        assert quit_1.state_id == 'ST_QUIT'
        perform_activity_0 = module_0.PerformActivity()
        assert perform_activity_0.state_id == 'ST_ACTIVITY'
        display_0 = module_0.Display()
        assert display_0.state_id == 'ST_GENERAL'
        play_game_0 = module_0.PlayGame()
        assert play_game_0.state_id == 'ST_TURN'
        assert play_game_0.re_rol == 3
        assert play_game_0.sub_state == 1
        assert module_0.PlayGame.STATE_THROWING_DICE == 1
        assert module_0.PlayGame.STATE_PLAYER_DECIDING == 2
        assert module_0.PlayGame.STATE_ENDING_TURN == 3
        var_0 = perform_activity_0.transitionate(quit_1)
        assert var_0.state_id == 'ST_TURN'
        assert var_0.re_rol == 3
        assert var_0.sub_state == 1
        str_0 = 'R8'
        lobby_0 = module_0.Lobby()
        assert lobby_0.state_id == 'ST_LOBBY'
        state_0 = module_0.State()
        assert state_0.state_id == 'ST_GENERAL'
        state_1 = display_0.next_state(state_0)
        assert state_1.state_id == 'ST_GENERAL'
        bool_0 = False
        state_2 = module_0.State()
        assert state_2.state_id == 'ST_GENERAL'
        str_1 = 'q[/qy\t\n'
        var_1 = quit_0.update(str_1)
        assert var_1 is None
        var_2 = state_2.set_transitionable(bool_0)
        assert var_2 is None
        var_3 = lobby_0.transitionate(str_0)
    except BaseException:
        pass


def test_case_2():
    try:
        game_start_0 = module_0.GameStart()
        assert game_start_0.state_id == 'ST_GAME_START'
        quit_0 = module_0.Quit()
        assert quit_0.state_id == 'ST_QUIT'
        play_game_0 = module_0.PlayGame()
        assert play_game_0.state_id == 'ST_TURN'
        assert play_game_0.re_rol == 3
        assert play_game_0.sub_state == 1
        assert module_0.PlayGame.STATE_THROWING_DICE == 1
        assert module_0.PlayGame.STATE_PLAYER_DECIDING == 2
        assert module_0.PlayGame.STATE_ENDING_TURN == 3
        var_0 = play_game_0.handle_answer_rerol()
        game_data_0 = None
        lobby_0 = module_0.Lobby()
        assert lobby_0.state_id == 'ST_LOBBY'
        var_1 = lobby_0.update(game_data_0)
        perform_activity_0 = module_0.PerformActivity()
        assert perform_activity_0.state_id == 'ST_ACTIVITY'
        game_rules_0 = module_1.GameRules()
        var_2 = play_game_0.apply_rules(game_rules_0, game_data_0)
    except BaseException:
        pass


def test_case_3():
    try:
        game_data_0 = None
        quit_0 = module_0.Quit()
        assert quit_0.state_id == 'ST_QUIT'
        quit_1 = module_0.Quit()
        assert quit_1.state_id == 'ST_QUIT'
        perform_activity_0 = module_0.PerformActivity()
        assert perform_activity_0.state_id == 'ST_ACTIVITY'
        display_0 = module_0.Display()
        assert display_0.state_id == 'ST_GENERAL'
        str_0 = display_0.get_message()
        assert str_0 == ''
        play_game_0 = module_0.PlayGame()
        assert play_game_0.state_id == 'ST_TURN'
        assert play_game_0.re_rol == 3
        assert play_game_0.sub_state == 1
        assert module_0.PlayGame.STATE_THROWING_DICE == 1
        assert module_0.PlayGame.STATE_PLAYER_DECIDING == 2
        assert module_0.PlayGame.STATE_ENDING_TURN == 3
        var_0 = perform_activity_0.transitionate(quit_1)
        assert var_0.state_id == 'ST_TURN'
        assert var_0.re_rol == 3
        assert var_0.sub_state == 1
        lobby_0 = module_0.Lobby()
        assert lobby_0.state_id == 'ST_LOBBY'
        state_0 = module_0.State()
        assert state_0.state_id == 'ST_GENERAL'
        state_1 = display_0.next_state(state_0)
        assert state_1.state_id == 'ST_GENERAL'
        var_1 = perform_activity_0.update(game_data_0)
    except BaseException:
        pass


def test_case_4():
    try:
        game_over_0 = module_0.GameOver()
        assert game_over_0.state_id == 'ST_GAME_OVER'
        lobby_0 = module_0.Lobby()
        assert lobby_0.state_id == 'ST_LOBBY'
        str_0 = 'qTFp,XpY'
        display_0 = module_0.Display()
        assert display_0.state_id == 'ST_GENERAL'
        state_0 = display_0.message(str_0)
        assert state_0.state_id == 'ST_GENERAL'
        state_1 = state_0.get_state(game_over_0)
    except BaseException:
        pass


def test_case_5():
    try:
        game_rules_0 = module_1.GameRules()
        float_0 = None
        game_over_0 = module_0.GameOver()
        assert game_over_0.state_id == 'ST_GAME_OVER'
        var_0 = game_over_0.update(float_0)
        game_data_0 = None
        play_game_0 = module_0.PlayGame()
        assert play_game_0.state_id == 'ST_TURN'
        assert play_game_0.re_rol == 3
        assert play_game_0.sub_state == 1
        assert module_0.PlayGame.STATE_THROWING_DICE == 1
        assert module_0.PlayGame.STATE_PLAYER_DECIDING == 2
        assert module_0.PlayGame.STATE_ENDING_TURN == 3
        var_1 = play_game_0.apply_rules(game_rules_0, game_data_0)
    except BaseException:
        pass


def test_case_6():
    try:
        game_rules_0 = module_1.GameRules()
        game_data_0 = None
        display_0 = module_0.Display()
        assert display_0.state_id == 'ST_GENERAL'
        state_0 = display_0.using(game_data_0)
        assert state_0.state_id == 'ST_GENERAL'
        var_0 = state_0.update(game_data_0)
        play_game_0 = module_0.PlayGame()
        assert play_game_0.state_id == 'ST_TURN'
        assert play_game_0.re_rol == 3
        assert play_game_0.sub_state == 1
        assert module_0.PlayGame.STATE_THROWING_DICE == 1
        assert module_0.PlayGame.STATE_PLAYER_DECIDING == 2
        assert module_0.PlayGame.STATE_ENDING_TURN == 3
        var_1 = play_game_0.apply_rules(game_rules_0, game_data_0)
    except BaseException:
        pass


def test_case_7():
    try:
        str_0 = '{>8vbZKI]K7L;\r3EU'
        display_0 = module_0.Display()
        assert display_0.state_id == 'ST_GENERAL'
        state_0 = display_0.using(str_0)
        assert state_0.state_id == 'ST_GENERAL'
        game_data_0 = None
        play_game_0 = module_0.PlayGame()
        assert play_game_0.state_id == 'ST_TURN'
        assert play_game_0.re_rol == 3
        assert play_game_0.sub_state == 1
        assert module_0.PlayGame.STATE_THROWING_DICE == 1
        assert module_0.PlayGame.STATE_PLAYER_DECIDING == 2
        assert module_0.PlayGame.STATE_ENDING_TURN == 3
        var_0 = play_game_0.update(game_data_0)
    except BaseException:
        pass


def test_case_8():
    try:
        game_data_0 = None
        lobby_0 = module_0.Lobby()
        assert lobby_0.state_id == 'ST_LOBBY'
        var_0 = lobby_0.update(game_data_0)
        player_0 = module_2.Player()
        perform_activity_0 = module_0.PerformActivity()
        assert perform_activity_0.state_id == 'ST_ACTIVITY'
        var_1 = perform_activity_0.transitionate(player_0)
        assert var_0 is None
        assert player_0.name == ''
        assert player_0.life == 0
        assert player_0.max_life == 0
        assert player_0.arrows == 0
        assert player_0.dice_count == 6
        assert player_0.status == 'alive'
        assert player_0.dice_value == ['', '', '', '', '', '']
        assert player_0.character is None
        assert player_0.role is None
        assert player_0.attack_vector == {'clockwise': [], 'backwards': []}
        assert var_1.state_id == 'ST_TURN'
        assert var_1.re_rol == 3
        assert var_1.sub_state == 1
        assert module_2.Player.S_DEAD == 'dead'
        assert module_2.Player.S_ALIVE == 'alive'
        assert module_2.Player.S_GHOST == 'ghost'
        assert module_0.PlayGame.STATE_THROWING_DICE == 1
        assert module_0.PlayGame.STATE_PLAYER_DECIDING == 2
        assert module_0.PlayGame.STATE_ENDING_TURN == 3
        quit_0 = module_0.Quit()
        assert quit_0.state_id == 'ST_QUIT'
        var_2 = lobby_0.handle_answer_add_user(game_data_0)
    except BaseException:
        pass


def test_case_9():
    try:
        play_game_0 = module_0.PlayGame()
        assert play_game_0.state_id == 'ST_TURN'
        assert play_game_0.re_rol == 3
        assert play_game_0.sub_state == 1
        assert module_0.PlayGame.STATE_THROWING_DICE == 1
        assert module_0.PlayGame.STATE_PLAYER_DECIDING == 2
        assert module_0.PlayGame.STATE_ENDING_TURN == 3
        var_0 = play_game_0.handle_answer_rerol()
        game_data_0 = None
        lobby_0 = module_0.Lobby()
        assert lobby_0.state_id == 'ST_LOBBY'
        var_1 = lobby_0.update(game_data_0)
        player_0 = module_2.Player()
        state_0 = module_0.State()
        assert state_0.state_id == 'ST_GENERAL'
        var_2 = state_0.transitionate(game_data_0)
        perform_activity_0 = module_0.PerformActivity()
        assert perform_activity_0.state_id == 'ST_ACTIVITY'
        var_3 = perform_activity_0.transitionate(player_0)
        assert len(var_0) == 2
        assert var_1 is None
        assert player_0.name == ''
        assert player_0.life == 0
        assert player_0.max_life == 0
        assert player_0.arrows == 0
        assert player_0.dice_count == 6
        assert player_0.status == 'alive'
        assert player_0.dice_value == ['', '', '', '', '', '']
        assert player_0.character is None
        assert player_0.role is None
        assert player_0.attack_vector == {'clockwise': [], 'backwards': []}
        assert var_2 is None
        assert var_3.state_id == 'ST_TURN'
        assert var_3.re_rol == 3
        assert var_3.sub_state == 1
        assert module_2.Player.S_DEAD == 'dead'
        assert module_2.Player.S_ALIVE == 'alive'
        assert module_2.Player.S_GHOST == 'ghost'
        quit_0 = module_0.Quit()
        assert quit_0.state_id == 'ST_QUIT'
        game_rules_0 = module_1.GameRules()
        assert game_rules_0 is not None
        game_rules_1 = None
        var_4 = play_game_0.apply_rules(game_rules_1, game_data_0)
    except BaseException:
        pass


def test_case_10():
    try:
        play_game_0 = module_0.PlayGame()
        assert play_game_0.state_id == 'ST_TURN'
        assert play_game_0.re_rol == 3
        assert play_game_0.sub_state == 1
        assert module_0.PlayGame.STATE_THROWING_DICE == 1
        assert module_0.PlayGame.STATE_PLAYER_DECIDING == 2
        assert module_0.PlayGame.STATE_ENDING_TURN == 3
        var_0 = play_game_0.handle_answer_rerol()
        game_data_0 = None
        lobby_0 = module_0.Lobby()
        assert lobby_0.state_id == 'ST_LOBBY'
        var_1 = lobby_0.update(game_data_0)
        player_0 = module_2.Player()
        perform_activity_0 = module_0.PerformActivity()
        assert perform_activity_0.state_id == 'ST_ACTIVITY'
        var_2 = perform_activity_0.transitionate(player_0)
        assert len(var_0) == 2
        assert var_1 is None
        assert player_0.name == ''
        assert player_0.life == 0
        assert player_0.max_life == 0
        assert player_0.arrows == 0
        assert player_0.dice_count == 6
        assert player_0.status == 'alive'
        assert player_0.dice_value == ['', '', '', '', '', '']
        assert player_0.character is None
        assert player_0.role is None
        assert player_0.attack_vector == {'clockwise': [], 'backwards': []}
        assert var_2.state_id == 'ST_TURN'
        assert var_2.re_rol == 3
        assert var_2.sub_state == 1
        assert module_2.Player.S_DEAD == 'dead'
        assert module_2.Player.S_ALIVE == 'alive'
        assert module_2.Player.S_GHOST == 'ghost'
        quit_0 = module_0.Quit()
        assert quit_0.state_id == 'ST_QUIT'
        game_over_0 = module_0.GameOver()
        assert game_over_0.state_id == 'ST_GAME_OVER'
        var_3 = perform_activity_0.transitionate(game_over_0)
        assert var_3.state_id == 'ST_TURN'
        assert var_3.re_rol == 3
        assert var_3.sub_state == 1
        game_rules_0 = None
        var_4 = play_game_0.apply_rules(game_rules_0, game_data_0)
    except BaseException:
        pass


def test_case_11():
    try:
        game_start_0 = module_0.GameStart()
        assert game_start_0.state_id == 'ST_GAME_START'
        quit_0 = module_0.Quit()
        assert quit_0.state_id == 'ST_QUIT'
        var_0 = quit_0.update(game_start_0)
        assert var_0 is None
        game_data_0 = None
        lobby_0 = module_0.Lobby()
        assert lobby_0.state_id == 'ST_LOBBY'
        var_1 = lobby_0.update(game_data_0)
        assert var_1 is None
        player_0 = module_2.Player()
        assert player_0.name == ''
        assert player_0.life == 0
        assert player_0.max_life == 0
        assert player_0.arrows == 0
        assert player_0.dice_count == 6
        assert player_0.status == 'alive'
        assert player_0.dice_value == ['', '', '', '', '', '']
        assert player_0.character is None
        assert player_0.role is None
        assert player_0.attack_vector == {'clockwise': [], 'backwards': []}
        assert module_2.Player.S_DEAD == 'dead'
        assert module_2.Player.S_ALIVE == 'alive'
        assert module_2.Player.S_GHOST == 'ghost'
        perform_activity_0 = module_0.PerformActivity()
        assert perform_activity_0.state_id == 'ST_ACTIVITY'
        var_2 = perform_activity_0.transitionate(player_0)
        assert var_2.state_id == 'ST_TURN'
        assert var_2.re_rol == 3
        assert var_2.sub_state == 1
        assert module_0.PlayGame.STATE_THROWING_DICE == 1
        assert module_0.PlayGame.STATE_PLAYER_DECIDING == 2
        assert module_0.PlayGame.STATE_ENDING_TURN == 3
        var_3 = game_start_0.update(game_data_0)
    except BaseException:
        pass


def test_case_12():
    try:
        game_start_0 = module_0.GameStart()
        assert game_start_0.state_id == 'ST_GAME_START'
        quit_0 = module_0.Quit()
        assert quit_0.state_id == 'ST_QUIT'
        var_0 = quit_0.update(game_start_0)
        assert var_0 is None
        play_game_0 = module_0.PlayGame()
        assert play_game_0.state_id == 'ST_TURN'
        assert play_game_0.re_rol == 3
        assert play_game_0.sub_state == 1
        assert module_0.PlayGame.STATE_THROWING_DICE == 1
        assert module_0.PlayGame.STATE_PLAYER_DECIDING == 2
        assert module_0.PlayGame.STATE_ENDING_TURN == 3
        var_1 = play_game_0.handle_answer_rerol()
        assert len(var_1) == 2
        game_data_0 = None
        lobby_0 = module_0.Lobby()
        assert lobby_0.state_id == 'ST_LOBBY'
        var_2 = lobby_0.update(game_data_0)
        assert var_2 is None
        player_0 = module_2.Player()
        assert player_0.name == ''
        assert player_0.life == 0
        assert player_0.max_life == 0
        assert player_0.arrows == 0
        assert player_0.dice_count == 6
        assert player_0.status == 'alive'
        assert player_0.dice_value == ['', '', '', '', '', '']
        assert player_0.character is None
        assert player_0.role is None
        assert player_0.attack_vector == {'clockwise': [], 'backwards': []}
        assert module_2.Player.S_DEAD == 'dead'
        assert module_2.Player.S_ALIVE == 'alive'
        assert module_2.Player.S_GHOST == 'ghost'
        str_0 = 'V;r]Y'
        display_0 = module_0.Display()
        assert display_0.state_id == 'ST_GENERAL'
        state_0 = display_0.message(str_0)
        assert state_0.state_id == 'ST_GENERAL'
        var_3 = quit_0.update(state_0)
        assert var_3 is None
        perform_activity_0 = module_0.PerformActivity()
        assert perform_activity_0.state_id == 'ST_ACTIVITY'
        var_4 = perform_activity_0.transitionate(player_0)
        assert var_4.state_id == 'ST_TURN'
        assert var_4.re_rol == 3
        assert var_4.sub_state == 1
        quit_1 = module_0.Quit()
        assert quit_1.state_id == 'ST_QUIT'
        game_rules_0 = module_1.GameRules()
        assert game_rules_0 is not None
        play_game_1 = module_0.PlayGame()
        assert play_game_1.state_id == 'ST_TURN'
        assert play_game_1.re_rol == 3
        assert play_game_1.sub_state == 1
        game_data_1 = module_1.GameData()
    except BaseException:
        pass


def test_case_13():
    try:
        game_rules_0 = module_1.GameRules()
        game_data_0 = None
        display_0 = module_0.Display()
        assert display_0.state_id == 'ST_GENERAL'
        state_0 = module_0.State()
        assert state_0.state_id == 'ST_GENERAL'
        var_0 = state_0.update(game_data_0)
        play_game_0 = module_0.PlayGame()
        assert play_game_0.state_id == 'ST_TURN'
        assert play_game_0.re_rol == 3
        assert play_game_0.sub_state == 1
        assert module_0.PlayGame.STATE_THROWING_DICE == 1
        assert module_0.PlayGame.STATE_PLAYER_DECIDING == 2
        assert module_0.PlayGame.STATE_ENDING_TURN == 3
        var_1 = play_game_0.apply_rules(game_rules_0, game_data_0)
    except BaseException:
        pass
