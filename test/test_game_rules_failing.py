# Automatically generated by Pynguin.
import player as module_0
import game_rules as module_1


def test_case_0():
    try:
        player_0 = module_0.Player()
        game_rules_0 = module_1.GameRules()
        bool_0 = game_rules_0.visit_life(player_0)
        assert bool_0 is False
        assert player_0.name == ''
        assert player_0.life == 0
        assert player_0.arrows == 0
        assert player_0.dice_count == 6
        assert player_0.status == 'alive'
        assert player_0.dice_value == ['', '', '', '', '', '']
        assert player_0.dice_re_roll == [3, 3, 3, 3, 3, 3]
        assert player_0.character is None
        assert player_0.role is None
        assert game_rules_0 is not None
        assert module_0.Player.S_DEAD == 'dead'
        assert module_0.Player.S_ALIVE == 'alive'
        assert module_0.Player.S_GHOST == 'ghost'
        game_data_0 = module_1.GameData()
    except BaseException:
        pass


def test_case_1():
    try:
        game_data_0 = module_1.GameData()
    except BaseException:
        pass


def test_case_2():
    try:
        game_rules_0 = module_1.GameRules()
        player_0 = None
        game_rules_1 = module_1.GameRules()
        var_0 = game_rules_1.visit_assign_character(player_0)
    except BaseException:
        pass


def test_case_3():
    try:
        game_rules_0 = module_1.GameRules()
        game_rules_1 = module_1.GameRules()
        var_0 = game_rules_1.__call__()
    except BaseException:
        pass


def test_case_4():
    try:
        player_0 = module_0.Player()
        bool_0 = False
        game_rules_0 = module_1.GameRules()
        bool_1 = game_rules_0.visit_throw_dice(player_0, bool_0)
        assert bool_1 is False
        assert player_0.name == ''
        assert player_0.life == 0
        assert player_0.arrows == 0
        assert player_0.dice_count == 6
        assert player_0.status == 'alive'
        assert player_0.dice_re_roll == [-3, 3, 3, 0, 3, 3]
        assert player_0.character is None
        assert player_0.role is None
        assert game_rules_0 is not None
        assert module_0.Player.S_DEAD == 'dead'
        assert module_0.Player.S_ALIVE == 'alive'
        assert module_0.Player.S_GHOST == 'ghost'
        game_rules_1 = module_1.GameRules()
        assert game_rules_1 is not None
        bool_2 = game_rules_0.visit_life(player_0)
        assert bool_2 is False
        game_data_0 = module_1.GameData()
    except BaseException:
        pass


def test_case_5():
    try:
        player_0 = module_0.Player()
        game_rules_0 = module_1.GameRules()
        var_0 = game_rules_0.throw_ghost(player_0)
        assert player_0.name == ''
        assert player_0.life == 0
        assert player_0.arrows == 0
        assert player_0.dice_count == 6
        assert player_0.status == 'alive'
        assert player_0.character is None
        assert player_0.role is None
        assert game_rules_0 is not None
        assert var_0 is None
        assert module_0.Player.S_DEAD == 'dead'
        assert module_0.Player.S_ALIVE == 'alive'
        assert module_0.Player.S_GHOST == 'ghost'
        var_1 = game_rules_0.visit_assign_character(player_0)
        assert var_1 is None
        bool_0 = game_rules_0.visit_character_stats_rules(player_0)
        assert bool_0 is False
        game_rules_1 = module_1.GameRules()
        assert game_rules_1 is not None
        var_2 = game_rules_0.visit_assign_character(player_0)
        assert var_2 is None
        bool_1 = game_rules_1.visit_character_stats_rules(player_0)
        assert bool_1 is False
        bool_2 = game_rules_1.visit_life(player_0)
        assert bool_2 is False
        dict_0 = {}
        var_3 = game_rules_0.__call__(**dict_0)
    except BaseException:
        pass


def test_case_6():
    try:
        player_0 = module_0.Player()
        bool_0 = False
        game_rules_0 = module_1.GameRules()
        bool_1 = game_rules_0.visit_throw_dice(player_0, bool_0)
        assert bool_1 is False
        assert player_0.name == ''
        assert player_0.life == 0
        assert player_0.arrows == 0
        assert player_0.dice_count == 6
        assert player_0.status == 'alive'
        assert player_0.character is None
        assert player_0.role is None
        assert game_rules_0 is not None
        assert module_0.Player.S_DEAD == 'dead'
        assert module_0.Player.S_ALIVE == 'alive'
        assert module_0.Player.S_GHOST == 'ghost'
        game_rules_1 = module_1.GameRules()
        assert game_rules_1 is not None
        var_0 = game_rules_1.visit_assign_character(player_0)
        assert var_0 is None
        bool_2 = game_rules_1.visit_character_stats_rules(player_0)
        assert bool_2 is False
        bool_3 = game_rules_0.visit_life(player_0)
        assert bool_3 is False
        game_rules_2 = module_1.GameRules()
        assert game_rules_2 is not None
        bool_4 = game_rules_1.visit_character_stats_rules(player_0)
        assert bool_4 is False
        game_data_0 = module_1.GameData()
    except BaseException:
        pass


def test_case_7():
    try:
        player_0 = module_0.Player()
        bool_0 = True
        game_rules_0 = module_1.GameRules()
        bool_1 = game_rules_0.visit_throw_dice(player_0, bool_0)
        assert bool_1 is False
        assert player_0.name == ''
        assert player_0.life == 0
        assert player_0.arrows == 0
        assert player_0.dice_count == 6
        assert player_0.status == 'alive'
        assert player_0.character is None
        assert player_0.role is None
        assert game_rules_0 is not None
        assert module_0.Player.S_DEAD == 'dead'
        assert module_0.Player.S_ALIVE == 'alive'
        assert module_0.Player.S_GHOST == 'ghost'
        game_rules_1 = module_1.GameRules()
        assert game_rules_1 is not None
        var_0 = game_rules_0.throw_ghost(player_0)
        assert var_0 is None
        var_1 = game_rules_1.visit_assign_character(player_0)
        assert var_1 is None
        bool_2 = game_rules_1.visit_character_stats_rules(player_0)
        assert bool_2 is False
        game_rules_2 = module_1.GameRules()
        assert game_rules_2 is not None
        var_2 = game_rules_0.visit_assign_character(player_0)
        assert var_2 is None
        bool_3 = game_rules_0.visit_character_stats_rules(player_0)
        assert bool_3 is False
        bool_4 = game_rules_0.visit_life(player_0)
        assert bool_4 is False
        dict_0 = {}
        var_3 = game_rules_1.__call__(**dict_0)
    except BaseException:
        pass


def test_case_8():
    try:
        player_0 = module_0.Player()
        game_rules_0 = module_1.GameRules()
        var_0 = game_rules_0.throw_ghost(player_0)
        assert player_0.name == ''
        assert player_0.life == 0
        assert player_0.arrows == 0
        assert player_0.dice_count == 6
        assert player_0.status == 'alive'
        assert player_0.dice_re_roll == [2, 3, 3, 3, 3, 3]
        assert player_0.character is None
        assert player_0.role is None
        assert game_rules_0 is not None
        assert var_0 is None
        assert module_0.Player.S_DEAD == 'dead'
        assert module_0.Player.S_ALIVE == 'alive'
        assert module_0.Player.S_GHOST == 'ghost'
        var_1 = game_rules_0.visit_assign_character(player_0)
        assert var_1 is None
        bool_0 = game_rules_0.visit_character_stats_rules(player_0)
        assert bool_0 is False
        bool_1 = game_rules_0.visit_life(player_0)
        assert bool_1 is False
        var_2 = game_rules_0.visit_initialize_player(player_0)
        assert player_0.life == 8
        assert player_0.dice_count == 5
        assert var_2 is None
        game_rules_1 = module_1.GameRules()
        assert game_rules_1 is not None
        game_data_0 = module_1.GameData()
    except BaseException:
        pass


def test_case_9():
    try:
        player_0 = module_0.Player()
        game_rules_0 = module_1.GameRules()
        game_rules_1 = module_1.GameRules()
        var_0 = game_rules_0.throw_ghost(player_0)
        assert player_0.name == ''
        assert player_0.life == 0
        assert player_0.arrows == 0
        assert player_0.dice_count == 6
        assert player_0.status == 'alive'
        assert player_0.character is None
        assert player_0.role is None
        assert game_rules_0 is not None
        assert game_rules_1 is not None
        assert var_0 is None
        assert module_0.Player.S_DEAD == 'dead'
        assert module_0.Player.S_ALIVE == 'alive'
        assert module_0.Player.S_GHOST == 'ghost'
        var_1 = game_rules_1.visit_assign_character(player_0)
        assert var_1 is None
        bool_0 = game_rules_1.visit_character_stats_rules(player_0)
        assert bool_0 is False
        bool_1 = game_rules_0.visit_life(player_0)
        assert bool_1 is False
        str_0 = 'yZwYuqOL/^pQ,e;'
        bool_2 = False
        bool_3 = game_rules_1.visit_throw_dice(player_0, bool_2)
        assert bool_3 is False
        bool_4 = True
        dict_0 = {str_0: bool_4, str_0: var_0}
        var_2 = game_rules_0.__call__(**dict_0)
    except BaseException:
        pass


def test_case_10():
    try:
        player_0 = module_0.Player()
        bool_0 = True
        game_rules_0 = module_1.GameRules()
        bool_1 = game_rules_0.visit_throw_dice(player_0, bool_0)
        assert bool_1 is False
        assert player_0.name == ''
        assert player_0.life == 0
        assert player_0.arrows == 0
        assert player_0.dice_count == 6
        assert player_0.status == 'alive'
        assert player_0.character is None
        assert player_0.role is None
        assert game_rules_0 is not None
        assert module_0.Player.S_DEAD == 'dead'
        assert module_0.Player.S_ALIVE == 'alive'
        assert module_0.Player.S_GHOST == 'ghost'
        game_rules_1 = module_1.GameRules()
        assert game_rules_1 is not None
        var_0 = game_rules_0.throw_ghost(player_0)
        assert var_0 is None
        var_1 = game_rules_1.visit_assign_character(player_0)
        assert var_1 is None
        bool_2 = game_rules_0.visit_life(player_0)
        assert bool_2 is False
        str_0 = 'yZwYuqOL/^pQ,e;'
        bool_3 = False
        bool_4 = game_rules_1.visit_throw_dice(player_0, bool_3)
        assert bool_4 is False
        bool_5 = True
        dict_0 = {str_0: bool_5, str_0: var_0}
        var_2 = game_rules_0.__call__(**dict_0)
    except BaseException:
        pass


def test_case_11():
    try:
        player_0 = module_0.Player()
        bool_0 = False
        game_rules_0 = module_1.GameRules()
        bool_1 = game_rules_0.visit_throw_dice(player_0, bool_0)
        assert bool_1 is False
        assert player_0.name == ''
        assert player_0.life == 0
        assert player_0.arrows == 0
        assert player_0.dice_count == 6
        assert player_0.status == 'alive'
        assert player_0.character is None
        assert player_0.role is None
        assert game_rules_0 is not None
        assert module_0.Player.S_DEAD == 'dead'
        assert module_0.Player.S_ALIVE == 'alive'
        assert module_0.Player.S_GHOST == 'ghost'
        var_0 = game_rules_0.visit_initialize_player(player_0)
        assert var_0 is None
        game_rules_1 = module_1.GameRules()
        assert game_rules_1 is not None
        var_1 = game_rules_0.throw_ghost(player_0)
        assert var_1 is None
        var_2 = game_rules_1.visit_assign_character(player_0)
        assert var_2 is None
        bool_2 = game_rules_1.visit_character_stats_rules(player_0)
        assert bool_2 is False
        bool_3 = game_rules_0.visit_life(player_0)
        assert bool_3 is False
        game_data_0 = module_1.GameData()
    except BaseException:
        pass


def test_case_12():
    try:
        player_0 = module_0.Player()
        game_rules_0 = module_1.GameRules()
        game_rules_1 = module_1.GameRules()
        var_0 = game_rules_0.throw_ghost(player_0)
        assert player_0.name == ''
        assert player_0.life == 0
        assert player_0.arrows == 0
        assert player_0.dice_count == 6
        assert player_0.status == 'alive'
        assert player_0.character is None
        assert player_0.role is None
        assert game_rules_0 is not None
        assert game_rules_1 is not None
        assert var_0 is None
        assert module_0.Player.S_DEAD == 'dead'
        assert module_0.Player.S_ALIVE == 'alive'
        assert module_0.Player.S_GHOST == 'ghost'
        var_1 = game_rules_1.visit_assign_character(player_0)
        assert var_1 is None
        bool_0 = game_rules_1.visit_character_stats_rules(player_0)
        assert bool_0 is False
        bool_1 = game_rules_0.visit_life(player_0)
        assert bool_1 is False
        var_2 = game_rules_1.visit_initialize_player(player_0)
        assert player_0.life == 8
        assert player_0.dice_count == 5
        assert var_2 is None
        game_rules_2 = module_1.GameRules()
        assert game_rules_2 is not None
        game_data_0 = module_1.GameData()
    except BaseException:
        pass


def test_case_13():
    try:
        game_data_0 = None
        game_rules_0 = module_1.GameRules()
        bool_0 = game_rules_0.visit_character_counter_rules(game_data_0)
    except BaseException:
        pass


def test_case_14():
    try:
        player_0 = module_0.Player()
        bool_0 = True
        game_rules_0 = module_1.GameRules()
        bool_1 = game_rules_0.visit_throw_dice(player_0, bool_0)
        assert bool_1 is False
        assert player_0.name == ''
        assert player_0.life == 0
        assert player_0.arrows == 0
        assert player_0.dice_count == 6
        assert player_0.status == 'alive'
        assert player_0.character is None
        assert player_0.role is None
        assert game_rules_0 is not None
        assert module_0.Player.S_DEAD == 'dead'
        assert module_0.Player.S_ALIVE == 'alive'
        assert module_0.Player.S_GHOST == 'ghost'
        game_rules_1 = module_1.GameRules()
        assert game_rules_1 is not None
        var_0 = game_rules_0.throw_ghost(player_0)
        assert var_0 is None
        var_1 = game_rules_1.visit_assign_character(player_0)
        assert var_1 is None
        bool_2 = game_rules_1.visit_character_stats_rules(player_0)
        assert bool_2 is False
        bool_3 = game_rules_0.visit_life(player_0)
        assert bool_3 is False
        game_data_0 = None
        var_2 = game_rules_1.visit_finish_turn(game_data_0)
    except BaseException:
        pass


def test_case_15():
    try:
        player_0 = module_0.Player()
        bool_0 = True
        game_rules_0 = module_1.GameRules()
        bool_1 = game_rules_0.visit_throw_dice(player_0, bool_0)
        assert bool_1 is False
        assert player_0.name == ''
        assert player_0.life == 0
        assert player_0.arrows == 0
        assert player_0.dice_count == 6
        assert player_0.status == 'alive'
        assert player_0.character is None
        assert player_0.role is None
        assert game_rules_0 is not None
        assert module_0.Player.S_DEAD == 'dead'
        assert module_0.Player.S_ALIVE == 'alive'
        assert module_0.Player.S_GHOST == 'ghost'
        game_rules_1 = module_1.GameRules()
        assert game_rules_1 is not None
        var_0 = game_rules_0.throw_ghost(player_0)
        assert var_0 is None
        var_1 = game_rules_1.visit_assign_character(player_0)
        assert var_1 is None
        bool_2 = game_rules_1.visit_character_stats_rules(player_0)
        assert bool_2 is False
        game_data_0 = None
        bool_3 = game_rules_1.visit_update_life(player_0, game_data_0)
    except BaseException:
        pass


def test_case_16():
    try:
        player_0 = module_0.Player()
        bool_0 = True
        game_rules_0 = module_1.GameRules()
        bool_1 = game_rules_0.visit_throw_dice(player_0, bool_0)
        assert bool_1 is False
        assert player_0.name == ''
        assert player_0.life == 0
        assert player_0.arrows == 0
        assert player_0.dice_count == 6
        assert player_0.status == 'alive'
        assert player_0.character is None
        assert player_0.role is None
        assert game_rules_0 is not None
        assert module_0.Player.S_DEAD == 'dead'
        assert module_0.Player.S_ALIVE == 'alive'
        assert module_0.Player.S_GHOST == 'ghost'
        game_rules_1 = module_1.GameRules()
        assert game_rules_1 is not None
        var_0 = game_rules_0.throw_ghost(player_0)
        assert var_0 is None
        var_1 = game_rules_1.visit_assign_character(player_0)
        assert var_1 is None
        bool_2 = game_rules_1.visit_character_stats_rules(player_0)
        assert bool_2 is False
        bool_3 = game_rules_0.visit_life(player_0)
        assert bool_3 is False
        bool_4 = False
        bool_5 = game_rules_1.visit_throw_dice(player_0, bool_4)
        assert bool_5 is False
        game_data_0 = None
        bool_6 = game_rules_1.visit_status(player_0, game_data_0)
        game_rules_2 = module_1.GameRules()
        game_data_1 = None
        var_2 = game_rules_2.visit_finish_turn(game_data_1)
    except BaseException:
        pass


def test_case_17():
    try:
        player_0 = module_0.Player()
        game_rules_0 = module_1.GameRules()
        game_data_0 = None
        bool_0 = game_rules_0.visit_status(player_0, game_data_0)
    except BaseException:
        pass
