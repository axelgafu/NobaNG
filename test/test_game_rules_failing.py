# Automatically generated by Pynguin.
import game_rules as module_0
import player as module_1


def test_case_0():
    try:
        game_rules_0 = module_0.GameRules()
        var_0 = game_rules_0.__call__()
    except BaseException:
        pass


def test_case_1():
    try:
        game_data_0 = module_0.GameData()
    except BaseException:
        pass


def test_case_2():
    try:
        player_0 = module_1.Player()
        game_rules_0 = module_0.GameRules()
        bool_0 = game_rules_0.visit_character_stats_rules(player_0)
    except BaseException:
        pass


def test_case_3():
    try:
        str_0 = 'i'
        player_0 = module_1.Player(str_0)
        game_data_0 = None
        game_rules_0 = module_0.GameRules()
        bool_0 = game_rules_0.visit_update_life(player_0, game_data_0)
    except BaseException:
        pass


def test_case_4():
    try:
        player_0 = module_1.Player()
        game_rules_0 = module_0.GameRules()
        var_0 = game_rules_0.throw_ghost(player_0)
        assert player_0.name == ''
        assert player_0.life == 0
        assert player_0.max_life == 0
        assert player_0.arrows == 0
        assert player_0.dice_count == 6
        assert player_0.status == 'alive'
        assert player_0.dice_re_roll == [2, 3, 3, 3, 3, 3]
        assert player_0.character is None
        assert player_0.role is None
        assert game_rules_0 is not None
        assert var_0 is None
        assert module_1.Player.S_DEAD == 'dead'
        assert module_1.Player.S_ALIVE == 'alive'
        assert module_1.Player.S_GHOST == 'ghost'
        game_data_0 = module_0.GameData()
    except BaseException:
        pass


def test_case_5():
    try:
        str_0 = 'sH&-Fj\r<z'
        player_0 = module_1.Player(str_0)
        bool_0 = True
        game_rules_0 = module_0.GameRules()
        var_0 = game_rules_0.visit_assign_character(player_0)
        bool_1 = game_rules_0.visit_throw_dice(player_0, bool_0)
        assert bool_1 is False
        assert player_0.name == 'sH&-Fj\r<z'
        assert player_0.life == 0
        assert player_0.max_life == 0
        assert player_0.arrows == 0
        assert player_0.dice_count == 6
        assert player_0.status == 'alive'
        assert player_0.role is None
        assert game_rules_0 is not None
        assert var_0 is None
        assert module_1.Player.S_DEAD == 'dead'
        assert module_1.Player.S_ALIVE == 'alive'
        assert module_1.Player.S_GHOST == 'ghost'
        game_data_0 = None
        game_rules_1 = module_0.GameRules()
        assert game_rules_1 is not None
        var_1 = game_rules_1.visit_initialize_player(player_0)
        assert player_0.dice_count == 5
        assert var_1 is None
        game_rules_2 = module_0.GameRules()
        assert game_rules_2 is not None
        bool_2 = game_rules_2.visit_update_life(player_0, game_data_0)
        assert bool_2 is False
        var_2 = game_rules_0.visit_assign_character(player_0)
        assert var_2 is None
        game_data_1 = module_0.GameData()
    except BaseException:
        pass


def test_case_6():
    try:
        player_0 = module_1.Player()
        game_rules_0 = module_0.GameRules()
        game_data_0 = None
        var_0 = game_rules_0.visit_finish_turn(game_data_0)
    except BaseException:
        pass


def test_case_7():
    try:
        game_rules_0 = module_0.GameRules()
        player_0 = module_1.Player()
        bool_0 = game_rules_0.visit_life(player_0)
        assert bool_0 is False
        assert game_rules_0 is not None
        assert player_0.name == ''
        assert player_0.life == 0
        assert player_0.max_life == 0
        assert player_0.arrows == 0
        assert player_0.dice_count == 6
        assert player_0.status == 'alive'
        assert player_0.dice_value == ['', '', '', '', '', '']
        assert player_0.dice_re_roll == [3, 3, 3, 3, 3, 3]
        assert player_0.character is None
        assert player_0.role is None
        assert module_1.Player.S_DEAD == 'dead'
        assert module_1.Player.S_ALIVE == 'alive'
        assert module_1.Player.S_GHOST == 'ghost'
        game_data_0 = None
        bool_1 = game_rules_0.visit_character_counter_rules(game_data_0)
    except BaseException:
        pass
