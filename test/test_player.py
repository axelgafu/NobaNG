# Automatically generated by Pynguin.
import player as module_0


def test_case_0():
    str_0 = '{8t-g58Mm|5'
    character_0 = module_0.Character(str_0, str_0)
    assert character_0.name == '{8t-g58Mm|5'
    assert character_0.description == '{8t-g58Mm|5'


def test_case_1():
    player_0 = module_0.Player()
    assert player_0.name == ''
    assert player_0.life == 0
    assert player_0.arrows == 0
    assert player_0.dice_count == 6
    assert player_0.status == 'alive'
    assert player_0.dice_value == ['', '', '', '', '', '']
    assert player_0.dice_re_roll == [3, 3, 3, 3, 3, 3]
    assert player_0.character is None
    assert player_0.role is None
    assert module_0.Player.S_DEAD == 'dead'
    assert module_0.Player.S_ALIVE == 'alive'
    assert module_0.Player.S_GHOST == 'ghost'
    player_1 = module_0.Player(player_0)
    assert player_1.life == 0
    assert player_1.arrows == 0
    assert player_1.dice_count == 6
    assert player_1.status == 'alive'
    assert player_1.dice_value == ['', '', '', '', '', '']
    assert player_1.dice_re_roll == [3, 3, 3, 3, 3, 3]
    assert player_1.character is None
    assert player_1.role is None
    bill_0 = module_0.Bill()
    assert bill_0.name == 'Bill Sin Rostro'
    assert bill_0.description == 'Aplica los resultados de flechas sólo después de tu última tirada.'
    var_0 = bill_0.initialize(player_1)
    assert player_1.life == 8
    assert player_1.dice_count == 5
    assert var_0 is None
    elie_0 = module_0.Elie()
    assert elie_0.name == 'Moli Stark'
    assert elie_0.description == 'Cada vez que otro jugador deba perder 1 o más puntos de vida puedes perderlos en su lugar'


def test_case_2():
    str_0 = ']/\rr%Q[fqh=U!m'
    str_1 = "E'VrTw"
    dict_0 = None
    character_0 = module_0.Character(str_1, str_1)
    assert character_0.name == "E'VrTw"
    assert character_0.description == "E'VrTw"
    var_0 = character_0.visit_character_counter_rules(dict_0, dict_0)
    character_1 = module_0.Character(str_0, str_1)
    assert character_1.name == ']/\rr%Q[fqh=U!m'
    assert character_1.description == "E'VrTw"
    var_1 = character_1.initialize()


def test_case_3():
    player_0 = module_0.Player()
    assert player_0.name == ''
    assert player_0.life == 0
    assert player_0.arrows == 0
    assert player_0.dice_count == 6
    assert player_0.status == 'alive'
    assert player_0.dice_value == ['', '', '', '', '', '']
    assert player_0.dice_re_roll == [3, 3, 3, 3, 3, 3]
    assert player_0.character is None
    assert player_0.role is None
    assert module_0.Player.S_DEAD == 'dead'
    assert module_0.Player.S_ALIVE == 'alive'
    assert module_0.Player.S_GHOST == 'ghost'
    str_0 = 'FwWhuA\n?n$EeJ'
    character_0 = module_0.Character(str_0, str_0)
    assert character_0.name == 'FwWhuA\n?n$EeJ'
    assert character_0.description == 'FwWhuA\n?n$EeJ'
    var_0 = character_0.visit_character_stats_rules(player_0)
    elie_0 = module_0.Elie()
    assert var_0 is None
    assert elie_0.name == 'Moli Stark'
    assert elie_0.description == 'Cada vez que otro jugador deba perder 1 o más puntos de vida puedes perderlos en su lugar'
    var_1 = elie_0.initialize(player_0)
    assert player_0.life == 8
    assert player_0.dice_count == 5
    assert var_1 is None


def test_case_4():
    str_0 = 'G/v~5~?N`Q-/E0y'
    set_0 = {str_0}
    int_0 = -210
    str_1 = 'Xe _D^=~^?]94<\x0c'
    str_2 = 'H'
    character_0 = module_0.Character(str_1, str_2)
    assert character_0.name == 'Xe _D^=~^?]94<\x0c'
    assert character_0.description == 'H'
    var_0 = character_0.visit_character_counter_rules(set_0, int_0)
